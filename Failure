const mocha = require('mocha');
const Spec = mocha.reporters.Spec;
const Base = mocha.reporters.Base;

class CustomSummary extends Spec {
  constructor(runner) {
    super(runner);

    const failures = [];
    let failCount = 0;

    runner.on('fail', (test, err) => {
      failCount++;
      failures.push({ count: failCount, test, err, indent: Base.indents });
    });

    runner.once('end', () => {
      if (failures.length === 0) return;

      console.log('\n=== Custom Failure Summary ===\n');
      failures.forEach(({ count, test, err, indent }) => {
        const ind = '  '.repeat(indent);
        console.log(`${ind}(${count}) FAIL: ${test.fullTitle()}`);
        console.log(`${ind}    ${err.message}\n`);
      });
    });
  }
}

module.exports = CustomSummary;

function syncDropdownWithTable(table, dropdownId, skipFixedCount = 2) {
    const colOrder = table.colReorder.order(); // Full current column order (original idxs)
    const dropdown = document.getElementById(dropdownId);
    const allItems = Array.from(dropdown.children); // Existing dropdown items

    // Build new dropdown
    const fragment = document.createDocumentFragment();

    colOrder.forEach((originalIdx, displayIdx) => {
        // Skip fixed columns (non-reorderable)
        if (displayIdx < skipFixedCount) return;

        const column = table.column(originalIdx);
        if (!column.visible()) return;

        // Match dropdown item with the original column index
        const item = allItems.find(el => parseInt(el.dataset.colIdx) === originalIdx);
        if (item) fragment.appendChild(item);
    });

    // Replace dropdown content with reordered list
    dropdown.innerHTML = '';
    dropdown.appendChild(fragment);
}

