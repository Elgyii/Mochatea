const mocha = require('mocha');
const Spec = mocha.reporters.Spec;
const Base = mocha.reporters.Base;

class CustomSummary extends Spec {
  constructor(runner) {
    super(runner);

    const failures = [];
    let failCount = 0;

    runner.on('fail', (test, err) => {
      failCount++;
      failures.push({ count: failCount, test, err, indent: Base.indents });
    });

    runner.once('end', () => {
      if (failures.length === 0) return;

      console.log('\n=== Custom Failure Summary ===\n');
      failures.forEach(({ count, test, err, indent }) => {
        const ind = '  '.repeat(indent);
        console.log(`${ind}(${count}) FAIL: ${test.fullTitle()}`);
        console.log(`${ind}    ${err.message}\n`);
      });
    });
  }
}

====== DataTables =====
module.exports = CustomSummary;

function syncDropdownWithTable(table, dropdownId, skipFixedCount = 2) {
    const colOrder = table.colReorder.order(); // Full current column order (original idxs)
    const dropdown = document.getElementById(dropdownId);
    const allItems = Array.from(dropdown.children); // Existing dropdown items

    // Build new dropdown
    const fragment = document.createDocumentFragment();

    colOrder.forEach((originalIdx, displayIdx) => {
        // Skip fixed columns (non-reorderable)
        if (displayIdx < skipFixedCount) return;

        const column = table.column(originalIdx);
        if (!column.visible()) return;

        // Match dropdown item with the original column index
        const item = allItems.find(el => parseInt(el.dataset.colIdx) === originalIdx);
        if (item) fragment.appendChild(item);
    });

    // Replace dropdown content with reordered list
    dropdown.innerHTML = '';
    dropdown.appendChild(fragment);
}

==== D3 ====
function drawChart(el, width, height, data) {
  const svg = d3.select(el).select("svg");
  const chart = svg.select("g.chart-content"); // your main group

  // Update scales based on new width/height
  xScale.range([0, width]);
  yScale.range([height, 0]);

  // DATA JOIN
  const line = d3.line()
    .x((d, i) => xScale(i))
    .y(d => yScale(d));

  // Re-bind and update path
  const path = chart.selectAll("path.line").data([data]);

  path.join("path")
    .attr("class", "line")
    .attr("d", line)
    .attr("fill", "none")
    .attr("stroke", "steelblue");
}

function createResponsiveChart(el, data, drawFn) {
  const resizeState = new WeakMap();
  const visibilityState = new WeakMap();
  const drawnState = new WeakMap();

  // Create and inject SVG if missing
  let svg = d3.select(el).select("svg");
  if (svg.empty()) {
    svg = d3.select(el)
      .append("svg")
      .attr("preserveAspectRatio", "xMinYMin meet")
      .style("width", "100%")
      .style("height", "100%");
  }

  function maybeRedraw(target) {
    const size = resizeState.get(target);
    const isVisible = visibilityState.get(target);

    if (!isVisible || !size || size.width === 0 || size.height === 0) return;

    const key = `${Math.round(size.width)}x${Math.round(size.height)}`;
    if (drawnState.get(target) === key) return; // skip identical draw

    drawnState.set(target, key);

    requestAnimationFrame(() => {
      svg.attr("viewBox", `0 0 ${size.width} ${size.height}`);
      drawFn(target, svg, size.width, size.height, data);
    });
  }

  const ro = new ResizeObserver(entries => {
    for (const entry of entries) {
      resizeState.set(entry.target, entry.contentRect);
      maybeRedraw(entry.target);
    }
  });

  const io = new IntersectionObserver(entries => {
    for (const entry of entries) {
      visibilityState.set(entry.target, entry.isIntersecting);
      maybeRedraw(entry.target);
    }
  }, { threshold: 0.1 });

  // Start observing
  ro.observe(el);
  io.observe(el);
}

const zoom = d3.zoom()
  .scaleExtent([1, 10])
  .on("zoom", ({ transform }) => {
    svg.select("g.chart").attr("transform", `translate(${margin.left + transform.x},${margin.top}) scale(${transform.k},1)`);
  });

svg.call(zoom);
